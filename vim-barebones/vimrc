" File tree for vim config files
"
" vim
" └── after
"     └── plugin
"         ├── airline.vim
"         ├── asyncomplete.vim
"         ├── autocommands.vim
"         ├── commands.vim
"         ├── keybinds.vim
"         ├── plugins.vim
"         └── vim_lsp.vim

" Color settings
syntax enable
colorscheme desert
highlight Normal    guibg=NONE ctermbg=NONE
highlight NonText   guibg=NONE ctermbg=NONE
set termguicolors

" Cursor visualization
"   SI = Insert mode
"   SR = Substitution mode
"   EI = Normal mode
let &t_SI.="\e[1 q"
let &t_SR.="\e[3 q"
let &t_EI.="\e[2 q"

" Indent related
set autoindent
set smartindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set smarttab

" Encoding
set encoding=utf-8
" set ambiwidth=double          " If you want to correctly show double spaced
                                " characters, cancel the comment

" autocompletion related
set nocompatible

" disable backup/swapfile creation
set nobackup
set noswapfile

" show line numbers
set number
set cursorline
" set relativenumber            " If you want relative line numbers, cancel
                                " the comment

" Etc
set backspace=indent,eol,start  " Enable backspace in insert mode
set showmatch
set mouse=a                     " Enable mouse inside of vim
set nohlsearch                  " Disable highlight on search
set incsearch                   " Start search when typing keywords
set ignorecase                  " Ignore case in command and search mode
set smartcase                   " If there is upper case inside of command or search,
                                " ignore the ignorecase option
set wildignorecase
set colorcolumn=80              " Show line at 80th character
set path=.,/usr/include/,**
set wildmenu                    " Enable tab completion inside command mode
set showcmd                     " Show command when typing
set title                       " Show title
set list
set listchars=tab:\|-,space:_   " Visualize tabs and spaces

" <Leader> key mapping
let mapleader=' '               " By default, <Leader> key is mapped to space

" Automatic installation of plugin manager (vim-plug)
let plug_path=has('nvim') ? stdpath('data') . '/autoload/plug.vim'
    \ : $HOME . '/.vim/autoload/plug.vim'
echo plug_path
"   If vim-plug doesn't exist, download vim-plug
if empty(glob(plug_path))
    call system(
        \ 'curl' . 
        \ ' -fLo ' . plug_path .
        \ ' --create-dirs' . 
        \ ' https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
        \ )
endif
" Plugin installation (Plugin installation must be inside of .vimrc)
call plug#begin(has('nvim') ? stdpath('data') . '/plugged' : $HOME . '/.vim/plugged')
    " Tagbar (list variables, functions, classes and etc.)
    Plug 'preservim/tagbar'

    " LSP
    Plug 'prabirshrestha/vim-lsp'
    Plug 'mattn/vim-lsp-settings'

    " code completion
    Plug 'prabirshrestha/asyncomplete.vim'
    Plug 'prabirshrestha/asyncomplete-lsp.vim'

    " status bar to show additional information
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'

    " Fuzzy finder (fzf)
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
call plug#end()

" Initial autorun for PlugInstall
"   Run PlugInstall to install plugins automatically
function! s:plug_install_on_initial_launch()
    let dir=has('nvim') ? stdpath('data') . '/plugged' : $HOME . '/.vim/plugged'

    if !isdirectory(dir)
        call execute('PlugInstall')
    endif
endfunction

call s:plug_install_on_initial_launch()
